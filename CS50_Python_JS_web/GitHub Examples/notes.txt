Make new app:

1. python .\manage.py startapp 'appname'
2. settings.py inside main folder sub folder of same name (ex. lecture3, lecture3)
3. under 'INSTALLED_APPS = [' area add the name of the new app
4. urls.py inside main folder sub folder of same name (ex. lecture3, lecture3) and add the path
5. inside of new app make a urls.py file and add this information to it:

from django.urls import path

from . import views

urlpatterns = [
    path("", views.index, name="index")

]

6. go to views.py inside app folder


Start New project in django:

(Using VSCode with terminal)
Go to folder where you want to have the project

1. python -m django startproject airline
2. cd .\airline\
3. code .
4. python .\manage.py startapp flights
5. airline folder -> settings.py
6. INSTALLED_APPS = [ 'flights', ...
7. urls.py
8. urlpatterns = [
    path('admin/', admin.site.urls),
    path("flights/", include("flights.urls")) <-- add this line
]
9.flights folder -> create urls.py
10. Add this into urls.py:

from django.urls import path

from . import views

urlpatterns = [

]

11. models.py
12.  Add this

class Flight(models.Model):
    # one model for each of the main tables we care about storing information about
    origin = models.CharField(max_length=64)
    destination = models.CharField(max_length=64)
    duration = models.IntegerField()

13. Need to make a migration -> python manage.py makemigrations
14. flights\migrations\0001_initial.py has been created
15. python manage.py migrate
16. database file now created (use ls to confirm)
17. python manage.py shell <-- allow us to execute python commands on this web app

HOW TO INSERT DATA INTO THIS TABLE
18. from flights.models import Flight
19. f = Flight(origin="New York", destination="London", duration=415)
20. f.save()

21. Flight.objects.all() <-- equivalent to Select-All
22. go to models.py under flights folder
23. add this to return information when queried:

    def __str__(self):
        return f"{self.id}: {self.origin} to {self.destination}"
24. python manage.py shell
25. 
>>> from flights.models import Flight
>>> flights = Flight.objects.all()    
>>> flights
<QuerySet [<Flight: 1: New York to London>]>
>>> flight = flights.first()
>>> flight
<Flight: 1: New York to London>
>>> flight.id
1
>>> flight.origin
'New York'
>>> flight.destination
'London'
>>> flight.duration
415
>>> flight.delete()
(1, {'flights.Flight': 1})
>>>
26. models.py
27. update code:
class Airport(models.Model):
    code = models.CharField(max_length=3)
    city = models.CharField(max_length=64)

    def __str__(self):
        return f"{self.city} ({self.code})"

class Flight(models.Model):
    # one model for each of the main tables we care about storing information about
    # origin = models.CharField(max_length=64)
    # cascade deletes and airpot from airport table and the flights associated
    # related_name is a way to access a relationship in reverse order
    origin = models.ForeignKey(Airport, on_delete=models.CASCADE, related_name="departures") 
    # destination = models.CharField(max_length=64)
    destination = models.ForeignKey(Airport, on_delete=models.CASCADE, related_name="arrivals")
    duration = models.IntegerField()

    def __str__(self):
        return f"{self.id}: {self.origin} to {self.destination}"

28. python manage.py makemigrations # look for any new changes that have been made to models.py and create a migration instruction for how to make those changes to the database

Migrations for 'flights':
  flights\migrations\0002_auto_20211008_1906.py
    - Create model Airport
    - Alter field destination on flight
    - Alter field origin on flight
29. python manage.py migrate # to apply the changes
30. python .\manage.py shell
31. from flights.models import *
32. now you can create airports with parameters
33. jfk = Airport(code = "JFK", city="New York")
34. jfk.save()
35. lhr = Airport(code = "LHR", city="London")
36. lhr.save()
37. cdg = Airport(code = "CDG", city="Paris")
38. cdg.save()
39. nrt = Airport(code = "NRT", city="Tokyo")
40. nrt.save()
41. f = Flight(origin=jfk, destination=lhr, duration=415) # add a flight
42. f.save()
43. 
>>> f
<Flight: 1: New York (JFK) to London (LHR)>
>>> f.origin
<Airport: New York (JFK)>
>>> f.origin.city
'New York'
>>> f.origin.code
'JFK'
>>> lhr.arrivals.all()
<QuerySet [<Flight: 1: New York (JFK) to London (LHR)>]>
>>>
44. urls.py # under flights folder
45. update code:
urlpatterns = [
    path("", views.index, name="index")
]
46. views.py -> update code:
from .models import Flight

# Create your views here.
def index(request):
    return render(request, "flights/index.html", {
        # give index.html access to a variable called flights and gives me all the flights - since we used Flight.objects.all()
        "flights": Flight.objects.all()
    })
47. flights-> new folder templates -> new folder flights -> new file layout.html
48. Create default layout for layout.html:

<!DOCTYPE html>
<html lang = "en">
    <head>
        <title>Flights</title>
    </head>
    <body>
        {% block body %}
        {% endblock %}
    </body>
</html>
49. create index.html to same folder
50. Add this code:
{% extends "flights/layout.html" %}

{% block body %}
    <h1>Flights</h1>
    <ul>
        {% for flight in flights %}
            <li>Flight {{ flight.id }}: {{ flight.origin}} to {{flight.destination}}</li>
        {% endfor %}
    </ul>
{% endblock %}
51. python .\manage.py runserver
52. go to server http://127.0.0.1:8000/flights/ and it will render the page with 1 flight
53. python .\manage.py shell <-- we're going to add more
54. from flights.models import *
54. Airport.objects.filter(city="New York") <-- gives us all the cities with new york
<QuerySet [<Airport: New York (JFK)>]>
>>> Airport.objects.filter(city="New York").first() <-- gives me the first and only thing in that query set
<Airport: New York (JFK)>
>>> Airport.objects.get(city="New York") <-- only get one result if it knows thats there's only going to be one airport with the city of new york. But will throw an error if there is ever more than one or none
<Airport: New York (JFK)>
>>> jfk = Airport.objects.get(city="New York") 
>>> cdg = Airport.objects.get(city="Paris")
>>> cdg
<Airport: Paris (CDG)>
>>> f = Flight(origin=jfk, destination=cdg, duration=435) <-- now we've added a new flight
>>> f.save()
55. python .\manage.py runserver
56. go to server http://127.0.0.1:8000/flights/ and it will render the page with 2 flights
57. using django admin now to create a new web app that will allow us to do this faster
58. terminal --> python .\manage.py createsuperuser
59. enter in info
60. Now django has created a super user account for me in this web app
61. need to add models to admin app
62. flights -> models.py to recall the classes you created
63. admin.py -> add this code:
from .models import Flight, Airport

# Register your models here.
admin.site.register(Airport)
admin.site.register(Flight)
64. Now we just told Django's admin app that I would like to use the admin app to be able to manipulate airports and to be able to manipulate flights
65. python .\manage.py runserver
66. http://127.0.0.1:8000/admin/
67. log in
68. add/remove flights/airports
69. Now we are going to create a page for each flight
70. flights -> url.py
71. add this code:
# specify flight id as an int, then load flight view whose name will be flight
path("<int:flight_id>", views.flight, name="flight")
72. go to views.py
73. add these lines below def index(request)
def flight(request, flight_id):
    # get me the flight whose id is equal to flight_id
    flight = Flight.objects.get(pk=flight_id)
    # render a template like flight/flight.html and pass the input to that the flight to flight.html
    return render(request, "flights/flight.html", {
        "flight": flight
    })
74. create a new template called flight.html in flights->template->flights->flight.html and add this code
# page that displays information about any particular flight
{% extends "flights/layout.html" %}

{% block body %}
<h1>Flight {{ flight.id }}</h1>

<ul>
    <li>Origin: {{ flight.origin }}</li>
    <li>Destination: {{ flight.duration }}</li>
    <li>Duration: {{ flight.duration }}</li>
</ul>

{% endblock %}
75. test by going to http://127.0.0.1:8000/flights/1
76. go to flights -> models.py
77. add new class under class Flight

# adding a passenger list
class Passenger(models.Model):
    first = models.CharField(max_length=64)
    last = models.CharField(max_length=64)
    # passengers will have flights associated with them which are a models.manytomanyfield with flight
    # so every passenger could be associated with many flights
    # blank=true allows passengers to have no flights
    # related_name means if I have a passenger I can use the flights (variable at begining) attribute to access all of their flights
    # If I have a flight I can use this passengers related_name to access all of the passengers who are on that flight
    flights = models.ManyToManyField(Flight, blank=True, related_name="passengers")

    #string representation of a passenger
    def __str__(self):
        return f"{self.first} {self.last}"
78.python manage.py makemigrations (since i made changes to my model)
Migrations for 'flights':
  flights\migrations\0003_passenger.py
    - Create model Passenger
79. python manage.py migrate
# now I have applied those changes to my actual database
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, flights, sessions
Running migrations:
  Applying flights.0003_passenger... OK
80. go to flights-> admin.py and register Passenger , update code to

from .models import Flight, Airport, Passenger

# Register your models here.
admin.site.register(Airport)
admin.site.register(Flight)
admin.site.register(Passenger)
81. python manage.py runserver
82. go to admin site and add passengers
83. go to flights ->views.py and update code to:

 	"flight": flight,
        # adding the passengers view to the page. we can do this b/c the 2nd passengers is a related name and getting all
        # the passengers that are on that flight
        "passengers": flight.passengers.all()
84. go to flights->templates->flights->flight.html
85. update code below last </ul> to

    <h2>Passengers</h2>

    <ul>
        <!--  create loop to print out the passenger in the list item -->
        {% for passenger in passengers %}
            <li>{{ passenger }}</li>
        {% empty %}
            <li>No passengers.</li>
        {% endfor %}
    </ul>

    <a href="{% url 'index' %}">Back to Flight List</a>

{% endblock %}
86. go to flights->templates->flights->index.html and update to

{% extends "flights/layout.html" %}

{% block body %}
    <h1>Flights</h1>
    <ul>
        {% for flight in flights %}
            <li>
                <!-- now ive put every single flight insid of a link that takes me to the flight route
                but b/c the flight route requires as an argument the flight id i can specify the flight
                id here-->
                <a href="{% url 'flight' flight.id %}">
                Flight {{ flight.id }}: {{ flight.origin}} to {{flight.destination}}</li>
                </a>
                {% endfor %}
    </ul>
{% endblock %}